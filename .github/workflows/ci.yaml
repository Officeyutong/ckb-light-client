name: CI
on:
  push:
    branches: [ master, develop ]
  pull_request:
    branches: [ master, develop ]
env:
  CARGO_TERM_COLOR: always
  RUSTFLAGS: -D warnings
  RUST_BACKTRACE: full
  RUST_TOOLCHAIN: 1.72.1
jobs:
  rustfmt:
    name: Checks / Format
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the Repository
        uses: actions/checkout@v4
      - name: Install Rust Toolchain
        run: |
          rustup toolchain install ${{ env.RUST_TOOLCHAIN }} --profile minimal --component rustfmt
          rustup override set ${{ env.RUST_TOOLCHAIN }}
      - name: Format Check
        run: make fmt
  clippy:
    name: Checks / Clippy
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the Repository
        uses: actions/checkout@v4
      - name: Install Rust Toolchain
        run: |
          rustup toolchain install ${{ env.RUST_TOOLCHAIN }} --profile minimal --component clippy
          rustup override set ${{ env.RUST_TOOLCHAIN }}
      - name: Lint Check
        run: make clippy
  test:
    name: Tests / Build & Test
    needs: [ rustfmt, clippy ]
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ ubuntu-latest, macos-latest, windows-2019 ]
    steps:
      - name: Checkout the Repository
        uses: actions/checkout@v4
      - name: Install cargo-nextest
        uses: taiki-e/install-action@nextest
      - name: Windows Dependencies
        if: matrix.os == 'windows-2019'
        run: |
          iwr -useb get.scoop.sh -outfile 'install-scoop.ps1'
          .\install-scoop.ps1 -RunAsAdmin
          echo "LIBCLANG_PATH=$($HOME)/scoop/apps/llvm/current/bin" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          echo "$env:USERPROFILE\scoop\shims" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
          scoop install llvm yasm
      - name: Build
        run: make build
      - name: UnitTest
        if: matrix.os != 'macos-latest'
        run: make test
      - name: UnitTest
        if: matrix.os == 'macos-latest'
        run: make test-portable
  code_coverage:
    name: Code Coverage
    needs: [ test ]
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ ubuntu-latest ]
    env:
      OS: ${{ matrix.os }}
    steps:
      - name: Checkout the Repository
        uses: actions/checkout@v4
      - name: Install Rust Toolchain
        run: |
          rustup toolchain install ${{ env.RUST_TOOLCHAIN }} --profile minimal
          rustup override set ${{ env.RUST_TOOLCHAIN }}
      - name: Install Grcov
        run: make coverage-install-tools
      - name: Generate Code Coverage Report of Unit Tests
        run: |
          make coverage-run-unittests
          make coverage-collect-data
      - name: Upload Code Coverage Report of Unit Tests
        uses: codecov/codecov-action@v3
        with:
          files: coverage-report.info
          env_vars: OS,RUST_TOOLCHAIN
          fail_ci_if_error: false
          flags: unittests
          verbose: false
          token: ${{ secrets.CODECOV_TOKEN }}
